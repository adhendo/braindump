{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/adamhendrickson/blogboi/components/youtubeAltLoader.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tquery {\\n\\t\\tyoutube {\\n\\t\\t\\tid\\n\\t\\t\\tvideoTitle\\n\\t\\t\\tvideoURL\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport styles from \"../styles/main.module.css\";\nexport var GET_YOUTUBE_VIDEOS = gql(_templateObject());\n\nfunction YoutubeAltLoader() {\n  var _useQuery = useQuery(GET_YOUTUBE_VIDEOS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return \"\";\n  if (error) return \"Error! \".concat(error.message);\n  return __jsx(\"div\", {\n    className: styles.youtubeScrollr,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, data.youtube.map(function (youtube) {\n    return __jsx(\"iframe\", {\n      width: \"389\",\n      height: \"205\",\n      src: youtube.videoURL,\n      frameborder: \"0\",\n      allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n      allowfullscreen: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    });\n  }));\n}\n\nexport default YoutubeAltLoader;","map":{"version":3,"sources":["/Users/adamhendrickson/blogboi/components/youtubeAltLoader.js"],"names":["useQuery","gql","styles","GET_YOUTUBE_VIDEOS","YoutubeAltLoader","loading","error","data","message","youtubeScrollr","youtube","map","videoURL"],"mappings":";;;;;;;;;;;;;;;AAAA,SAAQA,QAAR,QAAuB,qBAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AAEA,OAAO,IAAMC,kBAAkB,GAAGF,GAAH,mBAAxB;;AAUP,SAASG,gBAAT,GAA4B;AAAA,kBACIJ,QAAQ,CAACG,kBAAD,CADZ;AAAA,MACpBE,OADoB,aACpBA,OADoB;AAAA,MACXC,KADW,aACXA,KADW;AAAA,MACJC,IADI,aACJA,IADI;;AAG3B,MAAIF,OAAJ,EAAa,OAAO,EAAP;AACb,MAAIC,KAAJ,EAAW,wBAAiBA,KAAK,CAACE,OAAvB;AAEX,SACC;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACO,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiB,UAAAD,OAAO;AAAA,WACxB;AACC,MAAA,KAAK,EAAC,KADP;AAEC,MAAA,MAAM,EAAC,KAFR;AAGC,MAAA,GAAG,EAAEA,OAAO,CAACE,QAHd;AAIC,MAAA,WAAW,EAAC,GAJb;AAKC,MAAA,KAAK,EAAC,yEALP;AAMC,MAAA,eAAe,MANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADwB;AAAA,GAAxB,CADF,CADD;AAaA;;AAED,eAAeR,gBAAf","sourcesContent":["import {useQuery} from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport styles from \"../styles/main.module.css\";\n\nexport const GET_YOUTUBE_VIDEOS = gql`\n\tquery {\n\t\tyoutube {\n\t\t\tid\n\t\t\tvideoTitle\n\t\t\tvideoURL\n\t\t}\n\t}\n`;\n\nfunction YoutubeAltLoader() {\n\tconst {loading, error, data} = useQuery(GET_YOUTUBE_VIDEOS);\n\n\tif (loading) return \"\";\n\tif (error) return `Error! ${error.message}`;\n\n\treturn (\n\t\t<div className={styles.youtubeScrollr}>\n\t\t\t{data.youtube.map(youtube => (\n\t\t\t\t<iframe\n\t\t\t\t\twidth=\"389\"\n\t\t\t\t\theight=\"205\"\n\t\t\t\t\tsrc={youtube.videoURL}\n\t\t\t\t\tframeborder=\"0\"\n\t\t\t\t\tallow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n\t\t\t\t\tallowfullscreen></iframe>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default YoutubeAltLoader;\n"]},"metadata":{},"sourceType":"module"}