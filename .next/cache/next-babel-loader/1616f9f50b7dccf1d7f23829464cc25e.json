{"ast":null,"code":"var _jsxFileName = \"/Users/adamhendrickson/blogboi/pages/components/youtubeMeLoader.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport styles from \"../styles/main.module.css\";\nexport const GET_YOUTUBE_VIDEOS = gql`\n\tquery {\n\t\tyoutubeMe {\n\t\t\tid\n\t\t\tvideoTitle\n\t\t\tvideoURL\n\t\t}\n\t}\n`;\n\nfunction YoutubeMeLoader() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_YOUTUBE_VIDEOS);\n  if (loading) return \"\";\n  if (error) return `Error! ${error.message}`;\n  return __jsx(\"div\", {\n    className: styles.youtubeScrollr,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, data.youtubeMe.map(youtubeMe => __jsx(\"iframe\", {\n    width: \"450\",\n    height: \"235\",\n    src: youtubeMe.videoURL,\n    frameborder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowfullscreen: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })));\n}\n\nexport default YoutubeMeLoader;","map":{"version":3,"sources":["/Users/adamhendrickson/blogboi/pages/components/youtubeMeLoader.js"],"names":["useQuery","gql","styles","GET_YOUTUBE_VIDEOS","YoutubeMeLoader","loading","error","data","message","youtubeScrollr","youtubeMe","map","videoURL"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,qBAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AAEA,OAAO,MAAMC,kBAAkB,GAAGF,GAAI;;;;;;;;CAA/B;;AAUP,SAASG,eAAT,GAA2B;AAC1B,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBP,QAAQ,CAACG,kBAAD,CAAvC;AAEA,MAAIE,OAAJ,EAAa,OAAO,EAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;AAEX,SACC;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACO,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEF,IAAI,CAACG,SAAL,CAAeC,GAAf,CAAmBD,SAAS,IAC5B;AACC,IAAA,KAAK,EAAC,KADP;AAEC,IAAA,MAAM,EAAC,KAFR;AAGC,IAAA,GAAG,EAAEA,SAAS,CAACE,QAHhB;AAIC,IAAA,WAAW,EAAC,GAJb;AAKC,IAAA,KAAK,EAAC,yEALP;AAMC,IAAA,eAAe,MANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF,CADD;AAaA;;AAED,eAAeR,eAAf","sourcesContent":["import {useQuery} from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport styles from \"../styles/main.module.css\";\n\nexport const GET_YOUTUBE_VIDEOS = gql`\n\tquery {\n\t\tyoutubeMe {\n\t\t\tid\n\t\t\tvideoTitle\n\t\t\tvideoURL\n\t\t}\n\t}\n`;\n\nfunction YoutubeMeLoader() {\n\tconst {loading, error, data} = useQuery(GET_YOUTUBE_VIDEOS);\n\n\tif (loading) return \"\";\n\tif (error) return `Error! ${error.message}`;\n\n\treturn (\n\t\t<div className={styles.youtubeScrollr}>\n\t\t\t{data.youtubeMe.map(youtubeMe => (\n\t\t\t\t<iframe\n\t\t\t\t\twidth=\"450\"\n\t\t\t\t\theight=\"235\"\n\t\t\t\t\tsrc={youtubeMe.videoURL}\n\t\t\t\t\tframeborder=\"0\"\n\t\t\t\t\tallow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n\t\t\t\t\tallowfullscreen></iframe>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default YoutubeMeLoader;\n"]},"metadata":{},"sourceType":"module"}