{"ast":null,"code":"var _jsxFileName = \"/Users/adamhendrickson/blogboi/pages/components/youtubeLoader.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nexport const GET_YOUTUBE_VIDEOS = gql`\n\tquery {\n\t\tyoutube {\n\t\t\tid\n\t\t\tvideoTitle\n\t\t\tvideoURL\n\t\t}\n\t}\n`;\n\nfunction YoutubeLoader() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_YOUTUBE_VIDEOS);\n  if (loading) return \"\";\n  if (error) return `Error! ${error.message}`;\n  return __jsx(React.Fragment, null, data.youtube.map(youtube => __jsx(React.Fragment, null, __jsx(\"div\", {\n    key: youtube.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: youtube.videoURL,\n    frameborder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowfullscreen: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })))));\n}\n\nexport default YoutubeLoader;","map":{"version":3,"sources":["/Users/adamhendrickson/blogboi/pages/components/youtubeLoader.js"],"names":["useQuery","gql","GET_YOUTUBE_VIDEOS","YoutubeLoader","loading","error","data","message","youtube","map","id","videoURL"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,qBAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,OAAO,MAAMC,kBAAkB,GAAGD,GAAI;;;;;;;;CAA/B;;AAUP,SAASE,aAAT,GAAyB;AACxB,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBN,QAAQ,CAACE,kBAAD,CAAvC;AAEA,MAAIE,OAAJ,EAAa,OAAO,EAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;AAEX,SACC,4BACED,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAiBD,OAAO,IACxB,4BACC;AAAK,IAAA,GAAG,EAAEA,OAAO,CAACE,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AACC,IAAA,KAAK,EAAC,KADP;AAEC,IAAA,MAAM,EAAC,KAFR;AAGC,IAAA,GAAG,EAAEF,OAAO,CAACG,QAHd;AAIC,IAAA,WAAW,EAAC,GAJb;AAKC,IAAA,KAAK,EAAC,yEALP;AAMC,IAAA,eAAe,MANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD,CADA,CADF,CADD;AAiBA;;AAED,eAAeR,aAAf","sourcesContent":["import {useQuery} from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nexport const GET_YOUTUBE_VIDEOS = gql`\n\tquery {\n\t\tyoutube {\n\t\t\tid\n\t\t\tvideoTitle\n\t\t\tvideoURL\n\t\t}\n\t}\n`;\n\nfunction YoutubeLoader() {\n\tconst {loading, error, data} = useQuery(GET_YOUTUBE_VIDEOS);\n\n\tif (loading) return \"\";\n\tif (error) return `Error! ${error.message}`;\n\n\treturn (\n\t\t<>\n\t\t\t{data.youtube.map(youtube => (\n\t\t\t\t<>\n\t\t\t\t\t<div key={youtube.id}>\n\t\t\t\t\t\t<iframe\n\t\t\t\t\t\t\twidth=\"560\"\n\t\t\t\t\t\t\theight=\"315\"\n\t\t\t\t\t\t\tsrc={youtube.videoURL}\n\t\t\t\t\t\t\tframeborder=\"0\"\n\t\t\t\t\t\t\tallow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n\t\t\t\t\t\t\tallowfullscreen></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t))}\n\t\t</>\n\t);\n}\n\nexport default YoutubeLoader;\n"]},"metadata":{},"sourceType":"module"}