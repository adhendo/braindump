{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/adamhendrickson/blogboi/components/youtubeMeLoader.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tquery {\\n\\t\\tyoutubeMe {\\n\\t\\t\\tid\\n\\t\\t\\tvideoTitle\\n\\t\\t\\tvideoURL\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport styles from \"../styles/main.module.css\";\nexport var GET_YOUTUBE_VIDEOS = gql(_templateObject());\n\nfunction YoutubeMeLoader() {\n  var _useQuery = useQuery(GET_YOUTUBE_VIDEOS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return \"\";\n  if (error) return \"Error! \".concat(error.message);\n  return __jsx(\"div\", {\n    className: styles.youtubeMeScrollr,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, data.youtubeMe.map(function (youtubeMe, index) {\n    return __jsx(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, __jsx(\"iframe\", {\n      width: \"600\",\n      height: \"295\",\n      src: youtubeMe.videoURL,\n      frameborder: \"0\",\n      allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n      allowfullscreen: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }));\n  }));\n}\n\nexport default YoutubeMeLoader;","map":{"version":3,"sources":["/Users/adamhendrickson/blogboi/components/youtubeMeLoader.js"],"names":["useQuery","gql","styles","GET_YOUTUBE_VIDEOS","YoutubeMeLoader","loading","error","data","message","youtubeMeScrollr","youtubeMe","map","index","videoURL"],"mappings":";;;;;;;;;;;;;;;AAAA,SAAQA,QAAR,QAAuB,qBAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AAEA,OAAO,IAAMC,kBAAkB,GAAGF,GAAH,mBAAxB;;AAUP,SAASG,eAAT,GAA2B;AAAA,kBACKJ,QAAQ,CAACG,kBAAD,CADb;AAAA,MACnBE,OADmB,aACnBA,OADmB;AAAA,MACVC,KADU,aACVA,KADU;AAAA,MACHC,IADG,aACHA,IADG;;AAG1B,MAAIF,OAAJ,EAAa,OAAO,EAAP;AACb,MAAIC,KAAJ,EAAW,wBAAiBA,KAAK,CAACE,OAAvB;AAEX,SACC;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACO,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEF,IAAI,CAACG,SAAL,CAAeC,GAAf,CAAmB,UAACD,SAAD,EAAYE,KAAZ;AAAA,WACnB;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AACC,MAAA,KAAK,EAAC,KADP;AAEC,MAAA,MAAM,EAAC,KAFR;AAGC,MAAA,GAAG,EAAEF,SAAS,CAACG,QAHhB;AAIC,MAAA,WAAW,EAAC,GAJb;AAKC,MAAA,KAAK,EAAC,yEALP;AAMC,MAAA,eAAe,MANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADmB;AAAA,GAAnB,CADF,CADD;AAeA;;AAED,eAAeT,eAAf","sourcesContent":["import {useQuery} from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport styles from \"../styles/main.module.css\";\n\nexport const GET_YOUTUBE_VIDEOS = gql`\n\tquery {\n\t\tyoutubeMe {\n\t\t\tid\n\t\t\tvideoTitle\n\t\t\tvideoURL\n\t\t}\n\t}\n`;\n\nfunction YoutubeMeLoader() {\n\tconst {loading, error, data} = useQuery(GET_YOUTUBE_VIDEOS);\n\n\tif (loading) return \"\";\n\tif (error) return `Error! ${error.message}`;\n\n\treturn (\n\t\t<div className={styles.youtubeMeScrollr}>\n\t\t\t{data.youtubeMe.map((youtubeMe, index) => (\n\t\t\t\t<div key={index}>\n\t\t\t\t\t<iframe\n\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\theight=\"295\"\n\t\t\t\t\t\tsrc={youtubeMe.videoURL}\n\t\t\t\t\t\tframeborder=\"0\"\n\t\t\t\t\t\tallow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n\t\t\t\t\t\tallowfullscreen></iframe>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default YoutubeMeLoader;\n"]},"metadata":{},"sourceType":"module"}